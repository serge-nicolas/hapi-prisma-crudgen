generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

//test2
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// items

type keyValPair {
  key String
  val String
}

model Authtoken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @unique @db.ObjectId
  ttl    DateTime
  token  String
}

model keyVal {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key     String
  val     String
  Block   Block?  @relation(fields: [blockId], references: [id])
  blockId String? @db.ObjectId
}

enum LoginType {
  passwordlesswithemail
  sso
  oauth
}

enum Role {
  USER
  ADMIN
  API
}

enum UserStatus {
  active
  disabled
  hidden
  archived
  deleted
  banned
}

model Block {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  index       BigInt
  data        Json?
  hash        String
  parentBlock Block?    @relation(name: "parentBlock", fields: [parentId, parentHash], references: [id, hash], onDelete: NoAction, onUpdate: NoAction)
  Block       Block[]   @relation(name: "parentBlock")
  parentId    String?   @db.ObjectId
  parentHash  String?
  comments    Comment[]
  tag         String[]
  keyVal      keyVal[]

  @@unique([id, hash])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  message String
  Block   Block  @relation(fields: [blockId], references: [id])
  blockId String @db.ObjectId
}

model DocumentEntity {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  type    String
  tag     String[]
  content Json?
  script  String
}

model i18n {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  index      BigInt
  key        String
  translate  String
  sourceLang String
  targetLang String

  @@unique([id, key])
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  src            String
  classification String
  objects        String
  url            String
  mime           String
  comment        String?
  s3Key          String
  bucket         String
}

model KeyPair {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  publickey  String
  privatekey String
}

model Log {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  recordId    Int
  recordTitle String?
  difference  Json?   @db.Json
  action      String
  resource    String
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  title   String
  content String

  @@fulltext([title(sort: Desc), content])
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User?   @relation(fields: [user_id], references: [id], name: "createdBy")
  user_id   String? @db.ObjectId

  channel String
  params  Json
  job     Json
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String   @unique
  password String?
  name     String?
  status   String?
  logged   Boolean? @default(false)
  role     Role

  preferedLang String?

  blocks    Block[]          @relation(name: "createdBy")
  keys      KeyPair[]        @relation(name: "createdBy")
  i18ns     i18n[]           @relation(name: "createdBy")
  comments  Comment[]        @relation(name: "createdBy")
  images    Image[]          @relation(name: "createdBy")
  logs      Log[]            @relation(name: "createdBy")
  tasks     Task[]           @relation(name: "createdBy")
  documents DocumentEntity[] @relation(name: "createdBy")
  posts     Post[]           @relation(name: "createdBy")

  logAttempt UserLogAttempt[] @relation(name: "userLogAttempt")
  tempProxy  UserTempProxy?

  userStatus UserStatus @default(active)

  groups    UserGroup[] @relation(fields: [groupsIDs], references: [id], name: "userGroups")
  groupsIDs String[]    @db.ObjectId

  groupsOwned UserGroup[] @relation(name: "groupOwner")

  passphrase String?

  loginType LoginType  @default(passwordlesswithemail)
  Authtoken Authtoken?

  @@unique([id, email])
}

model UserGroup {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  users   User[]   @relation(fields: [userIDs], references: [id], name: "userGroups")
  userIDs String[] @db.ObjectId

  owner   User?   @relation(fields: [ownerId], references: [id], name: "groupOwner")
  ownerId String? @db.ObjectId
}

model UserLogAttempt {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], name: "userLogAttempt")
  userId      String   @db.ObjectId
  oneTimeCode String
  expire      DateTime
}

model UserTempProxy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  privateKey String?
  publicKey  String?
  authtoken  String?
}
